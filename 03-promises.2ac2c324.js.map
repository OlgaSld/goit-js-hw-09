{"mappings":"qhBAOA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,QAsBtC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAa,C,SAAEF,E,MAAUC,GACzBE,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAAKC,KACvBC,YAAW,KACTN,EAEFI,EAAIL,GAGJM,EAAIN,EAAW,GAEhBD,EAAM,G,CAjCTL,EAAOc,iBAAiB,UAExB,SAAsBC,GACpBA,EAAEC,iBAEF,IAAIC,EAAYC,OAAOlB,EAAOK,MAAMc,OAEpC,IAAK,IAAIC,EAAI,EAAGA,GAAKpB,EAAOqB,OAAOF,MAAOC,GAAK,EAC/CjB,EAAciB,EAAGH,GAChBK,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAU,IAEzEqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAAzB,GAAS0B,OAAOG,QAAQ,sBAAoBvB,QAAeC,MAAU,IAEnEY,GAAaC,OAAOlB,EAAO4B,KAAKT,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount.Під час кожного виклику \n// передай їй номер промісу(position), що створюється,  і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. \n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код \n// функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nimport Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('form');\n\nformEl.addEventListener('submit', handlerStart);\n\nfunction handlerStart(e) {\n  e.preventDefault();\n\n  let delayUser = Number(formEl.delay.value);\n  // console.log(`delayUser1`, delayUser);\n  for (let i = 1; i <= formEl.amount.value; i += 1) {\n  createPromise(i, delayUser)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n      delayUser += Number(formEl.step.value);\n  // console.log(typeof delayUser);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const objPromise = { position, delay };\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n  if (shouldResolve) {\n    // Fulfill\n    res(objPromise);\n  } else {\n    // Reject\n    rej(objPromise);\n  } \n}, delay)\n  }\n)}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","objPromise","shouldResolve","Math","random","Promise","res","rej","setTimeout","addEventListener","e","preventDefault","delayUser","Number","value","i","amount","then","$parcel$interopDefault","Notify","success","catch","failure","step"],"version":3,"file":"03-promises.2ac2c324.js.map"}